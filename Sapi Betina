// Sapi Betina

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <ctype.h>

typedef struct pqueueNode_t {
    int massa, umur, id;
    struct pqueueNode_t *next;
} PQueueNode;

/* Struktur ADT PriorityQueue menggunakan Linked List */

// Prioritas default: nilai minimum
typedef struct pqueue_t {
    PQueueNode *_top;
    unsigned _size;
    int massa, umur,id;
} PriorityQueue;

/* Function definition below */

void pqueue_init(PriorityQueue *pqueue)
{
    pqueue->_top = NULL;
    pqueue->_size = 0;
}

bool pqueue_isEmpty(PriorityQueue *pqueue) {
    return (pqueue->_top == NULL);
}

void pqueue_push(PriorityQueue *pqueue, int id, int umur, int massa)
{
    PQueueNode *temp = pqueue->_top;
    PQueueNode *newNode = \
        (PQueueNode*) malloc (sizeof(PQueueNode));
    newNode->massa = massa;
    newNode->umur = umur;
    newNode->id = id;
    newNode->next = NULL;

    if (pqueue_isEmpty(pqueue)) {
        pqueue->_top = newNode;
        return;
    }

    if (umur > pqueue->_top->umur) {
        newNode->next = pqueue->_top;
        pqueue->_top = newNode;
    }
    else if (umur == pqueue->_top->umur && massa > pqueue->_top->massa) {
        newNode->next = pqueue->_top;
        pqueue->_top = newNode;
    }
    else {
        while ( temp->next != NULL && temp->next->umur > umur){
            temp = temp->next;
        }
        if (temp->next != NULL && temp->next->umur == umur && massa > temp->next->massa) {
            newNode->next = temp->next;
            temp->next = newNode;
        }
        else if (temp->next != NULL && temp->next->umur == umur && massa < temp->next->massa) {
            while ( temp->next != NULL && massa < temp->next->massa){
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        else {
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }
}

void pqueue_pop(PriorityQueue *pqueue)
{
    if (!pqueue_isEmpty(pqueue)) {
        PQueueNode *temp = pqueue->_top;
        pqueue->_top = pqueue->_top->next;
        free(temp);
    }
}

int pqueue_top(PriorityQueue *pqueue) {
    if (!pqueue_isEmpty(pqueue))
        return pqueue->_top->id;
    else return 0;
}

int main(int argc, char const *argv[])
{
    // Buat objek PriorityQueue
    PriorityQueue myPque;
    // PENTING! Jangan lupa diinisialisasi
    pqueue_init(&myPque);

    int Q, id, umur, massa, n;
    char perintah[10];

    scanf("%d", &Q);
    for (int i=0;i<Q;i++){
        scanf("%s", perintah);
        if (toupper(perintah[0]) == 'D'){
            scanf("%d %d %d", &id, &umur, &massa);
            pqueue_push(&myPque, id, umur, massa);

        }else if (toupper(perintah[0]) == 'B'){
            scanf("%d", &n);
            for(int j=1;j<=n;j++){
                pqueue_pop(&myPque);
            }
        }

    }
    while (!pqueue_isEmpty(&myPque)){
        printf("%d ", pqueue_top(&myPque));
        pqueue_pop(&myPque);
    }

    return 0;
}

